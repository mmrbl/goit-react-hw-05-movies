{"version":3,"file":"static/js/681.0c090ed5.chunk.js","mappings":"sMA+DA,UAzDgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BL,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAaA,OAXAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaL,GACVM,MAAK,YAAgB,IAAdC,EAAa,EAAbA,QACRV,EAAWU,EACZ,IACAC,OAAM,SAAAN,GACLC,EAASD,EACV,IACAO,SAAQ,kBAAMV,GAAa,EAAnB,GACV,GAAE,CAACC,IAEAF,GACK,SAAC,KAAD,CAAgBY,MAAM,WAG1Bd,GAIDM,GACF,IAAIS,MAAMT,EAAMU,SAGdhB,GAAWA,EAAQiB,OAAS,GAE9B,wBACGjB,EAAQkB,KAAI,SAACC,GACZ,IAA0BC,EAA2BD,EAA7CE,eAAkBD,SAAYE,EAAeH,EAAfG,QAASC,EAAMJ,EAANI,GAC/C,OACE,2BACE,wBAAKH,KACL,uBAAIE,MAFGC,EAKZ,OAKD,uBAAG,oDAxBP,CAgCD,C,qBC3DD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO3B,GAEP,YADAqB,EAAOrB,EAET,CAEI0B,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOvB,KAAKkB,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C,uJClCMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NALN,SASeC,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,EAAAA,EAAAA,IAAAA,MAAf,WAAyBC,GAAzB,kGAE2BC,MAAMD,EAAKN,GAFtC,cAEUQ,EAFV,gBAGuBA,EAASC,OAHhC,cAGUC,EAHV,yBAIWA,GAJX,wCAMU,IAAIxC,MAAJ,MANV,iFAUO,SAAeyC,IAAtB,4CAAO,OAAP,cAAO,oFACO,+DADP,kBAEEN,EADK,iEADP,kEAKA,SAAeO,EAAtB,+CAAO,OAAP,cAAO,WAA4BC,GAA5B,8EACCC,EADD,0DAC0DD,EAD1D,gEAEER,EAAUS,IAFZ,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,cAAO,WAAyBrC,GAAzB,8EACCoC,EADD,6CAC6CpC,EAD7C,qCAEE2B,EAAUS,IAFZ,kEAKA,SAAelD,EAAtB,+CAAO,OAAP,cAAO,WAA4Bc,GAA5B,8EACCoC,EADD,6CAC6CpC,EAD7C,oDAEE2B,EAAUS,IAFZ,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,cAAO,WAA0BtC,GAA1B,8EACCoC,EADD,6CAC6CpC,EAD7C,6CAEE2B,EAAUS,IAFZ,kE","sources":["components/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","services/HTTPRequest.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { RotatingSquare } from 'react-loader-spinner';\nimport { useParams } from \"react-router-dom\";\nimport { fetchReviews } from \"services/HTTPRequest\";\n\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { movieId } = useParams()\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchReviews(movieId)\n      .then(({results}) => {\n      setReviews(results);\n    })\n    .catch(error => {\n      setError(error);\n    })\n    .finally(() => setIsLoading(false))\n  }, [movieId]);\n\n  if (isLoading) {\n    return <RotatingSquare color=\"orange\"/>\n  }\n\n  if (!reviews) {\n    return \n  } \n\n  if (error) {\n    new Error(error.message)\n  }\n\n  if (reviews && reviews.length > 0) {\n    return (\n    <ul>\n      {reviews.map((review) => {\n        const { author_details: { username }, content, id} = review\n        return (\n          <li key={id}>\n            <h3>{username}</h3>\n            <p>{content}</p>\n          </li>\n        )\n      })}\n    </ul>\n  )\n  } else {\n    return (\n      <p>We don't have any reviews for this movie.</p>\n    )\n  }\n\n  \n\n  \n  \n}\n\n\n\nexport default Reviews\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjYzAyMjMxNGZlNmNmMjVlZmYyOTBkZDkxYjUxOTAzZiIsInN1YiI6IjY0NmZhMDQyYzVhZGE1MDBkZWU2Njc4MyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.uIxfSgTwNgRYS5UWjwvghZ01EYEFs3x2JVSyeT6FUHE',\n  },\n};\n\nasync function fetchData(url) {\n  try {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexport async function fetchTrending() {\n  const URL = 'https://api.themoviedb.org/3/trending/all/day?language=en-US';\n  return fetchData(URL);\n}\n\nexport async function fetchByQuery(query) {\n  const URL = `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`;\n  return fetchData(URL);\n}\n\nexport async function fetchByID(id) {\n  const URL = `https://api.themoviedb.org/3/movie/${id}?language=en-US`;\n  return fetchData(URL);\n}\n\nexport async function fetchReviews(id) {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`;\n  return fetchData(URL);\n}\n\nexport async function fetchCasts(id) {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`;\n  return fetchData(URL);\n}\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","error","setError","useEffect","fetchReviews","then","results","catch","finally","color","Error","message","length","map","review","username","author_details","content","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","options","method","headers","accept","Authorization","fetchData","url","fetch","response","json","data","fetchTrending","fetchByQuery","query","URL","fetchByID","fetchCasts"],"sourceRoot":""}