{"version":3,"file":"static/js/543.ed1dff9f.chunk.js","mappings":"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","sources":["components/Cast.styled.jsx","components/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","services/HTTPRequest.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: calc(-1 * 15px);\n  margin-left: calc(-1 * 15px);\n\n  list-style: none;\n`\n\nexport const CastItem = styled.li`\n  margin-top: 15px;\n  margin-left: 15px;\n  flex-basis: calc(100% / 6 - 15px);\n`","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCasts } from 'services/HTTPRequest';\nimport noPhoto from \"../services/noPhoto.png\";\nimport { CastItem, CastList } from './Cast.styled';\nimport { RotatingSquare } from 'react-loader-spinner';\n\n\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { movieId } = useParams()\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchCasts(movieId)\n      .then(({cast}) => {\n      setCasts(cast);\n    })\n    .catch(error => {\n      setError(error);\n    })\n    .finally(() => setIsLoading(false))\n    \n  }, [movieId]);\n\n  if (isLoading) {\n    return <RotatingSquare color=\"orange\"/>\n  }\n\n  if (error) {\n    console.log(error)\n  }\n\n  if (casts && casts.length !== 0) {\n    return (\n    <div>\n      <CastList>\n        {casts.map((cast) => {\n          const { character, name, id, profile_path } = cast\n          return (\n            <CastItem key={id}>\n              <img src={profile_path ? 'https://image.tmdb.org/t/p/w200' + profile_path : noPhoto} alt={name} />\n              <h3>{name}</h3>\n              <p>Character: {character}</p>\n            </CastItem>\n          )\n        })}\n      </CastList>\n    </div>\n  )\n  } else {\n    return (\n      <p>We don't have any casts for this movie.</p>\n    )\n  }\n\n  \n}\n\nexport default Cast\n\n\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjYzAyMjMxNGZlNmNmMjVlZmYyOTBkZDkxYjUxOTAzZiIsInN1YiI6IjY0NmZhMDQyYzVhZGE1MDBkZWU2Njc4MyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.uIxfSgTwNgRYS5UWjwvghZ01EYEFs3x2JVSyeT6FUHE',\n  },\n};\n\nasync function fetchData(url) {\n  try {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexport async function fetchTrending() {\n  const URL = 'https://api.themoviedb.org/3/trending/all/day?language=en-US';\n  return fetchData(URL);\n}\n\nexport async function fetchByQuery(query) {\n  const URL = `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`;\n  return fetchData(URL);\n}\n\nexport async function fetchByID(id) {\n  const URL = `https://api.themoviedb.org/3/movie/${id}?language=en-US`;\n  return fetchData(URL);\n}\n\nexport async function fetchReviews(id) {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`;\n  return fetchData(URL);\n}\n\nexport async function fetchCasts(id) {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`;\n  return fetchData(URL);\n}\n"],"names":["CastList","styled","CastItem","useState","casts","setCasts","isLoading","setIsLoading","movieId","useParams","error","setError","useEffect","fetchCasts","then","cast","catch","finally","color","console","log","length","map","character","name","id","profile_path","src","alt","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","options","method","headers","accept","Authorization","fetchData","url","fetch","response","json","data","Error","fetchTrending","fetchByQuery","query","URL","fetchByID","fetchReviews"],"sourceRoot":""}